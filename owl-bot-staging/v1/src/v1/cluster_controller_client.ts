// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cluster_controller_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cluster_controller_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  The ClusterControllerService provides methods to manage clusters
 *  of Compute Engine instances.
 * @class
 * @memberof v1
 */
export class ClusterControllerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  clusterControllerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ClusterControllerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ClusterControllerClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectLocationAutoscalingPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autoscalingPolicies/{autoscaling_policy}'
      ),
      projectLocationWorkflowTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workflowTemplates/{workflow_template}'
      ),
      projectRegionAutoscalingPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/autoscalingPolicies/{autoscaling_policy}'
      ),
      projectRegionWorkflowTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/workflowTemplates/{workflow_template}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listClusters:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'clusters')
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback ?
      this._gaxModule.protobuf.Root.fromJSON(
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json")) :
      this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const createClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Cluster') as gax.protobuf.Type;
    const createClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.ClusterOperationMetadata') as gax.protobuf.Type;
    const updateClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.Cluster') as gax.protobuf.Type;
    const updateClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.ClusterOperationMetadata') as gax.protobuf.Type;
    const deleteClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.ClusterOperationMetadata') as gax.protobuf.Type;
    const diagnoseClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.DiagnoseClusterResults') as gax.protobuf.Type;
    const diagnoseClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataproc.v1.ClusterOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createClusterResponse.decode.bind(createClusterResponse),
        createClusterMetadata.decode.bind(createClusterMetadata)),
      updateCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateClusterResponse.decode.bind(updateClusterResponse),
        updateClusterMetadata.decode.bind(updateClusterMetadata)),
      deleteCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteClusterResponse.decode.bind(deleteClusterResponse),
        deleteClusterMetadata.decode.bind(deleteClusterMetadata)),
      diagnoseCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        diagnoseClusterResponse.decode.bind(diagnoseClusterResponse),
        diagnoseClusterMetadata.decode.bind(diagnoseClusterMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.dataproc.v1.ClusterController', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.clusterControllerStub) {
      return this.clusterControllerStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataproc.v1.ClusterController.
    this.clusterControllerStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.dataproc.v1.ClusterController') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataproc.v1.ClusterController,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const clusterControllerStubMethods =
        ['createCluster', 'updateCluster', 'deleteCluster', 'getCluster', 'listClusters', 'diagnoseCluster'];
    for (const methodName of clusterControllerStubMethods) {
      const callPromise = this.clusterControllerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.clusterControllerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getCluster(
      request: protos.google.cloud.dataproc.v1.IGetClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataproc.v1.ICluster,
        protos.google.cloud.dataproc.v1.IGetClusterRequest|undefined, {}|undefined
      ]>;
  getCluster(
      request: protos.google.cloud.dataproc.v1.IGetClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataproc.v1.ICluster,
          protos.google.cloud.dataproc.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCluster(
      request: protos.google.cloud.dataproc.v1.IGetClusterRequest,
      callback: Callback<
          protos.google.cloud.dataproc.v1.ICluster,
          protos.google.cloud.dataproc.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the resource representation for a cluster in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.clusterName
 *   Required. The cluster name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Cluster]{@link google.cloud.dataproc.v1.Cluster}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getCluster(request);
 */
  getCluster(
      request: protos.google.cloud.dataproc.v1.IGetClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataproc.v1.ICluster,
          protos.google.cloud.dataproc.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataproc.v1.ICluster,
          protos.google.cloud.dataproc.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataproc.v1.ICluster,
        protos.google.cloud.dataproc.v1.IGetClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getCluster(request, options, callback);
  }

  createCluster(
      request: protos.google.cloud.dataproc.v1.ICreateClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCluster(
      request: protos.google.cloud.dataproc.v1.ICreateClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCluster(
      request: protos.google.cloud.dataproc.v1.ICreateClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a cluster in a project. The returned
 * {@link google.longrunning.Operation.metadata|Operation.metadata} will be
 * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {google.cloud.dataproc.v1.Cluster} request.cluster
 *   Required. The cluster to create.
 * @param {string} [request.requestId]
 *   Optional. A unique id used to identify the request. If the server
 *   receives two {@link google.cloud.dataproc.v1.CreateClusterRequest|CreateClusterRequest} requests  with the same
 *   id, then the second request will be ignored and the
 *   first {@link google.longrunning.Operation|google.longrunning.Operation} created and stored in the backend
 *   is returned.
 *
 *   It is recommended to always set this value to a
 *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
 *
 *   The id must contain only letters (a-z, A-Z), numbers (0-9),
 *   underscores (_), and hyphens (-). The maximum length is 40 characters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.createCluster(request);
 * const [response] = await operation.promise();
 */
  createCluster(
      request: protos.google.cloud.dataproc.v1.ICreateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.createCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkCreateClusterProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkCreateClusterProgress(name: string): Promise<LROperation<protos.google.cloud.dataproc.v1.Cluster, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createCluster, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.dataproc.v1.Cluster, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>;
  }
  updateCluster(
      request: protos.google.cloud.dataproc.v1.IUpdateClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateCluster(
      request: protos.google.cloud.dataproc.v1.IUpdateClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateCluster(
      request: protos.google.cloud.dataproc.v1.IUpdateClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a cluster in a project. The returned
 * {@link google.longrunning.Operation.metadata|Operation.metadata} will be
 * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project the
 *   cluster belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.clusterName
 *   Required. The cluster name.
 * @param {google.cloud.dataproc.v1.Cluster} request.cluster
 *   Required. The changes to the cluster.
 * @param {google.protobuf.Duration} [request.gracefulDecommissionTimeout]
 *   Optional. Timeout for graceful YARN decomissioning. Graceful
 *   decommissioning allows removing nodes from the cluster without
 *   interrupting jobs in progress. Timeout specifies how long to wait for jobs
 *   in progress to finish before forcefully removing nodes (and potentially
 *   interrupting jobs). Default timeout is 0 (for forceful decommission), and
 *   the maximum allowed timeout is 1 day. (see JSON representation of
 *   [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).
 *
 *   Only supported on Dataproc image versions 1.2 and higher.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Specifies the path, relative to `Cluster`, of
 *   the field to update. For example, to change the number of workers
 *   in a cluster to 5, the `update_mask` parameter would be
 *   specified as `config.worker_config.num_instances`,
 *   and the `PATCH` request body would specify the new value, as follows:
 *
 *       {
 *         "config":{
 *           "workerConfig":{
 *             "numInstances":"5"
 *           }
 *         }
 *       }
 *   Similarly, to change the number of preemptible workers in a cluster to 5,
 *   the `update_mask` parameter would be
 *   `config.secondary_worker_config.num_instances`, and the `PATCH` request
 *   body would be set as follows:
 *
 *       {
 *         "config":{
 *           "secondaryWorkerConfig":{
 *             "numInstances":"5"
 *           }
 *         }
 *       }
 *   <strong>Note:</strong> Currently, only the following fields can be updated:
 *
 *    <table>
 *    <tbody>
 *    <tr>
 *    <td><strong>Mask</strong></td>
 *    <td><strong>Purpose</strong></td>
 *    </tr>
 *    <tr>
 *    <td><strong><em>labels</em></strong></td>
 *    <td>Update labels</td>
 *    </tr>
 *    <tr>
 *    <td><strong><em>config.worker_config.num_instances</em></strong></td>
 *    <td>Resize primary worker group</td>
 *    </tr>
 *    <tr>
 *    <td><strong><em>config.secondary_worker_config.num_instances</em></strong></td>
 *    <td>Resize secondary worker group</td>
 *    </tr>
 *    <tr>
 *    <td>config.autoscaling_config.policy_uri</td><td>Use, stop using, or
 *    change autoscaling policies</td>
 *    </tr>
 *    </tbody>
 *    </table>
 * @param {string} [request.requestId]
 *   Optional. A unique id used to identify the request. If the server
 *   receives two {@link google.cloud.dataproc.v1.UpdateClusterRequest|UpdateClusterRequest} requests  with the same
 *   id, then the second request will be ignored and the
 *   first {@link google.longrunning.Operation|google.longrunning.Operation} created and stored in the
 *   backend is returned.
 *
 *   It is recommended to always set this value to a
 *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
 *
 *   The id must contain only letters (a-z, A-Z), numbers (0-9),
 *   underscores (_), and hyphens (-). The maximum length is 40 characters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.updateCluster(request);
 * const [response] = await operation.promise();
 */
  updateCluster(
      request: protos.google.cloud.dataproc.v1.IUpdateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.ICluster, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkUpdateClusterProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkUpdateClusterProgress(name: string): Promise<LROperation<protos.google.cloud.dataproc.v1.Cluster, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateCluster, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.dataproc.v1.Cluster, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>;
  }
  deleteCluster(
      request: protos.google.cloud.dataproc.v1.IDeleteClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCluster(
      request: protos.google.cloud.dataproc.v1.IDeleteClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCluster(
      request: protos.google.cloud.dataproc.v1.IDeleteClusterRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a cluster in a project. The returned
 * {@link google.longrunning.Operation.metadata|Operation.metadata} will be
 * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.clusterName
 *   Required. The cluster name.
 * @param {string} [request.clusterUuid]
 *   Optional. Specifying the `cluster_uuid` means the RPC should fail
 *   (with error NOT_FOUND) if cluster with specified UUID does not exist.
 * @param {string} [request.requestId]
 *   Optional. A unique id used to identify the request. If the server
 *   receives two {@link google.cloud.dataproc.v1.DeleteClusterRequest|DeleteClusterRequest} requests  with the same
 *   id, then the second request will be ignored and the
 *   first {@link google.longrunning.Operation|google.longrunning.Operation} created and stored in the
 *   backend is returned.
 *
 *   It is recommended to always set this value to a
 *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
 *
 *   The id must contain only letters (a-z, A-Z), numbers (0-9),
 *   underscores (_), and hyphens (-). The maximum length is 40 characters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.deleteCluster(request);
 * const [response] = await operation.promise();
 */
  deleteCluster(
      request: protos.google.cloud.dataproc.v1.IDeleteClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkDeleteClusterProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkDeleteClusterProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteCluster, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>;
  }
  diagnoseCluster(
      request: protos.google.cloud.dataproc.v1.IDiagnoseClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  diagnoseCluster(
      request: protos.google.cloud.dataproc.v1.IDiagnoseClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  diagnoseCluster(
      request: protos.google.cloud.dataproc.v1.IDiagnoseClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets cluster diagnostic information. The returned
 * {@link google.longrunning.Operation.metadata|Operation.metadata} will be
 * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
 * After the operation completes,
 * {@link google.longrunning.Operation.response|Operation.response}
 * contains
 * [DiagnoseClusterResults](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.clusterName
 *   Required. The cluster name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.diagnoseCluster(request);
 * const [response] = await operation.promise();
 */
  diagnoseCluster(
      request: protos.google.cloud.dataproc.v1.IDiagnoseClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.dataproc.v1.IDiagnoseClusterResults, protos.google.cloud.dataproc.v1.IClusterOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.diagnoseCluster(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `diagnoseCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkDiagnoseClusterProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkDiagnoseClusterProgress(name: string): Promise<LROperation<protos.google.cloud.dataproc.v1.DiagnoseClusterResults, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.diagnoseCluster, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.dataproc.v1.DiagnoseClusterResults, protos.google.cloud.dataproc.v1.ClusterOperationMetadata>;
  }
  listClusters(
      request: protos.google.cloud.dataproc.v1.IListClustersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataproc.v1.ICluster[],
        protos.google.cloud.dataproc.v1.IListClustersRequest|null,
        protos.google.cloud.dataproc.v1.IListClustersResponse
      ]>;
  listClusters(
      request: protos.google.cloud.dataproc.v1.IListClustersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.dataproc.v1.IListClustersRequest,
          protos.google.cloud.dataproc.v1.IListClustersResponse|null|undefined,
          protos.google.cloud.dataproc.v1.ICluster>): void;
  listClusters(
      request: protos.google.cloud.dataproc.v1.IListClustersRequest,
      callback: PaginationCallback<
          protos.google.cloud.dataproc.v1.IListClustersRequest,
          protos.google.cloud.dataproc.v1.IListClustersResponse|null|undefined,
          protos.google.cloud.dataproc.v1.ICluster>): void;
/**
 * Lists all regions/{region}/clusters in a project alphabetically.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} [request.filter]
 *   Optional. A filter constraining the clusters to list. Filters are
 *   case-sensitive and have the following syntax:
 *
 *   field = value [AND [field = value]] ...
 *
 *   where **field** is one of `status.state`, `clusterName`, or `labels.[KEY]`,
 *   and `[KEY]` is a label key. **value** can be `*` to match all values.
 *   `status.state` can be one of the following: `ACTIVE`, `INACTIVE`,
 *   `CREATING`, `RUNNING`, `ERROR`, `DELETING`, or `UPDATING`. `ACTIVE`
 *   contains the `CREATING`, `UPDATING`, and `RUNNING` states. `INACTIVE`
 *   contains the `DELETING` and `ERROR` states.
 *   `clusterName` is the name of the cluster provided at creation time.
 *   Only the logical `AND` operator is supported; space-separated items are
 *   treated as having an implicit `AND` operator.
 *
 *   Example filter:
 *
 *   status.state = ACTIVE AND clusterName = mycluster
 *   AND labels.env = staging AND labels.starred = *
 * @param {number} [request.pageSize]
 *   Optional. The standard List page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard List page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Cluster]{@link google.cloud.dataproc.v1.Cluster}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listClusters(
      request: protos.google.cloud.dataproc.v1.IListClustersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.dataproc.v1.IListClustersRequest,
          protos.google.cloud.dataproc.v1.IListClustersResponse|null|undefined,
          protos.google.cloud.dataproc.v1.ICluster>,
      callback?: PaginationCallback<
          protos.google.cloud.dataproc.v1.IListClustersRequest,
          protos.google.cloud.dataproc.v1.IListClustersResponse|null|undefined,
          protos.google.cloud.dataproc.v1.ICluster>):
      Promise<[
        protos.google.cloud.dataproc.v1.ICluster[],
        protos.google.cloud.dataproc.v1.IListClustersRequest|null,
        protos.google.cloud.dataproc.v1.IListClustersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.listClusters(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} [request.filter]
 *   Optional. A filter constraining the clusters to list. Filters are
 *   case-sensitive and have the following syntax:
 *
 *   field = value [AND [field = value]] ...
 *
 *   where **field** is one of `status.state`, `clusterName`, or `labels.[KEY]`,
 *   and `[KEY]` is a label key. **value** can be `*` to match all values.
 *   `status.state` can be one of the following: `ACTIVE`, `INACTIVE`,
 *   `CREATING`, `RUNNING`, `ERROR`, `DELETING`, or `UPDATING`. `ACTIVE`
 *   contains the `CREATING`, `UPDATING`, and `RUNNING` states. `INACTIVE`
 *   contains the `DELETING` and `ERROR` states.
 *   `clusterName` is the name of the cluster provided at creation time.
 *   Only the logical `AND` operator is supported; space-separated items are
 *   treated as having an implicit `AND` operator.
 *
 *   Example filter:
 *
 *   status.state = ACTIVE AND clusterName = mycluster
 *   AND labels.env = staging AND labels.starred = *
 * @param {number} [request.pageSize]
 *   Optional. The standard List page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard List page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Cluster]{@link google.cloud.dataproc.v1.Cluster} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listClustersStream(
      request?: protos.google.cloud.dataproc.v1.IListClustersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listClusters.createStream(
      this.innerApiCalls.listClusters as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listClusters`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the cluster
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} [request.filter]
 *   Optional. A filter constraining the clusters to list. Filters are
 *   case-sensitive and have the following syntax:
 *
 *   field = value [AND [field = value]] ...
 *
 *   where **field** is one of `status.state`, `clusterName`, or `labels.[KEY]`,
 *   and `[KEY]` is a label key. **value** can be `*` to match all values.
 *   `status.state` can be one of the following: `ACTIVE`, `INACTIVE`,
 *   `CREATING`, `RUNNING`, `ERROR`, `DELETING`, or `UPDATING`. `ACTIVE`
 *   contains the `CREATING`, `UPDATING`, and `RUNNING` states. `INACTIVE`
 *   contains the `DELETING` and `ERROR` states.
 *   `clusterName` is the name of the cluster provided at creation time.
 *   Only the logical `AND` operator is supported; space-separated items are
 *   treated as having an implicit `AND` operator.
 *
 *   Example filter:
 *
 *   status.state = ACTIVE AND clusterName = mycluster
 *   AND labels.env = staging AND labels.starred = *
 * @param {number} [request.pageSize]
 *   Optional. The standard List page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard List page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Cluster]{@link google.cloud.dataproc.v1.Cluster}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listClustersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listClustersAsync(
      request?: protos.google.cloud.dataproc.v1.IListClustersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.dataproc.v1.ICluster>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listClusters.asyncIterate(
      this.innerApiCalls['listClusters'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataproc.v1.ICluster>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified projectLocationAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectLocationAutoscalingPolicyPath(project:string,location:string,autoscalingPolicy:string) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.render({
      project: project,
      location: location,
      autoscaling_policy: autoscalingPolicy,
    });
  }

  /**
   * Parse the project from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).project;
  }

  /**
   * Parse the location from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).location;
  }

  /**
   * Parse the autoscaling_policy from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this.pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectLocationWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectLocationWorkflowTemplatePath(project:string,location:string,workflowTemplate:string) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.render({
      project: project,
      location: location,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).project;
  }

  /**
   * Parse the location from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).location;
  }

  /**
   * Parse the workflow_template from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this.pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).workflow_template;
  }

  /**
   * Return a fully-qualified projectRegionAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectRegionAutoscalingPolicyPath(project:string,region:string,autoscalingPolicy:string) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.render({
      project: project,
      region: region,
      autoscaling_policy: autoscalingPolicy,
    });
  }

  /**
   * Parse the project from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).project;
  }

  /**
   * Parse the region from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).region;
  }

  /**
   * Parse the autoscaling_policy from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this.pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectRegionWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectRegionWorkflowTemplatePath(project:string,region:string,workflowTemplate:string) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.render({
      project: project,
      region: region,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).project;
  }

  /**
   * Parse the region from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).region;
  }

  /**
   * Parse the workflow_template from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this.pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).workflow_template;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.clusterControllerStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
