// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {APICallback, Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, PaginationResponse} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './job_controller_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The JobController provides methods to manage jobs.
 * @class
 * @memberof v1beta2
 */
export class JobControllerClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  jobControllerStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of JobControllerClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof JobControllerClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof JobControllerClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      projectLocationAutoscalingPolicyPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autoscalingPolicies/{autoscaling_policy}'
      ),
      projectLocationWorkflowTemplatePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workflowTemplates/{workflow_template}'
      ),
      projectRegionAutoscalingPolicyPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/autoscalingPolicies/{autoscaling_policy}'
      ),
      projectRegionWorkflowTemplatePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/regions/{region}/workflowTemplates/{workflow_template}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listJobs:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'jobs')
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.cloud.dataproc.v1beta2.JobController', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.dataproc.v1beta2.JobController.
    this.jobControllerStub = gaxGrpc.createStub(
        opts.fallback ?
          (protos as protobuf.Root).lookupService('google.cloud.dataproc.v1beta2.JobController') :
          // tslint:disable-next-line no-any
          (protos as any).google.cloud.dataproc.v1beta2.JobController,
        opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const jobControllerStubMethods =
        ['submitJob', 'getJob', 'listJobs', 'updateJob', 'cancelJob', 'deleteJob'];

    for (const methodName of jobControllerStubMethods) {
      const innerCallPromise = this.jobControllerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] ||
            this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'dataproc.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  submitJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest|undefined, {}|undefined
      ]>;
  submitJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest|undefined,
          {}|undefined>): void;
/**
 * Submits a job to a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {google.cloud.dataproc.v1beta2.Job} request.job
 *   Required. The job resource.
 * @param {string} [request.requestId]
 *   Optional. A unique id used to identify the request. If the server
 *   receives two [SubmitJobRequest][google.cloud.dataproc.v1beta2.SubmitJobRequest] requests  with the same
 *   id, then the second request will be ignored and the
 *   first [Job][google.cloud.dataproc.v1beta2.Job] created and stored in the backend
 *   is returned.
 *
 *   It is recommended to always set this value to a
 *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
 *
 *   The id must contain only letters (a-z, A-Z), numbers (0-9),
 *   underscores (_), and hyphens (-). The maximum length is 40 characters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1beta2.Job}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  submitJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.ISubmitJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.submitJob(request, options, callback);
  }
  getJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest|undefined, {}|undefined
      ]>;
  getJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest|undefined,
          {}|undefined>): void;
/**
 * Gets the resource representation for a job in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.jobId
 *   Required. The job ID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1beta2.Job}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.IGetJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.getJob(request, options, callback);
  }
  updateJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest|undefined, {}|undefined
      ]>;
  updateJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest|undefined,
          {}|undefined>): void;
/**
 * Updates a job in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.jobId
 *   Required. The job ID.
 * @param {google.cloud.dataproc.v1beta2.Job} request.job
 *   Required. The changes to the job.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Specifies the path, relative to <code>Job</code>, of
 *   the field to update. For example, to update the labels of a Job the
 *   <code>update_mask</code> parameter would be specified as
 *   <code>labels</code>, and the `PATCH` request body would specify the new
 *   value. <strong>Note:</strong> Currently, <code>labels</code> is the only
 *   field that can be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1beta2.Job}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.IUpdateJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.updateJob(request, options, callback);
  }
  cancelJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest|undefined, {}|undefined
      ]>;
  cancelJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest|undefined,
          {}|undefined>): void;
/**
 * Starts a job cancellation request. To access the job resource
 * after cancellation, call
 * [regions/{region}/jobs.list](https://cloud.google.com/dataproc/docs/reference/rest/v1beta2/projects.regions.jobs/list)
 * or
 * [regions/{region}/jobs.get](https://cloud.google.com/dataproc/docs/reference/rest/v1beta2/projects.regions.jobs/get).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.jobId
 *   Required. The job ID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Job]{@link google.cloud.dataproc.v1beta2.Job}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  cancelJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob,
          protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob,
        protosTypes.google.cloud.dataproc.v1beta2.ICancelJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.cancelJob(request, options, callback);
  }
  deleteJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest|undefined, {}|undefined
      ]>;
  deleteJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest|undefined,
          {}|undefined>): void;
/**
 * Deletes the job from the project. If the job is active, the delete fails,
 * and the response returns `FAILED_PRECONDITION`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {string} request.jobId
 *   Required. The job ID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteJob(
      request: protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.cloud.dataproc.v1beta2.IDeleteJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.deleteJob(request, options, callback);
  }

  listJobs(
      request: protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob[],
        protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest|null,
        protosTypes.google.cloud.dataproc.v1beta2.IListJobsResponse
      ]>;
  listJobs(
      request: protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob[],
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest|null,
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsResponse>): void;
/**
 * Lists regions/{region}/jobs in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {number} [request.pageSize]
 *   Optional. The number of results to return in each response.
 * @param {string} [request.pageToken]
 *   Optional. The page token, returned by a previous call, to request the
 *   next page of results.
 * @param {string} [request.clusterName]
 *   Optional. If set, the returned jobs list includes only jobs that were
 *   submitted to the named cluster.
 * @param {google.cloud.dataproc.v1beta2.ListJobsRequest.JobStateMatcher} [request.jobStateMatcher]
 *   Optional. Specifies enumerated categories of jobs to list.
 *   (default = match ALL jobs).
 *
 *   If `filter` is provided, `jobStateMatcher` will be ignored.
 * @param {string} [request.filter]
 *   Optional. A filter constraining the jobs to list. Filters are
 *   case-sensitive and have the following syntax:
 *
 *   [field = value] AND [field [= value]] ...
 *
 *   where **field** is `status.state` or `labels.[KEY]`, and `[KEY]` is a label
 *   key. **value** can be `*` to match all values.
 *   `status.state` can be either `ACTIVE` or `NON_ACTIVE`.
 *   Only the logical `AND` operator is supported; space-separated items are
 *   treated as having an implicit `AND` operator.
 *
 *   Example filter:
 *
 *   status.state = ACTIVE AND labels.env = staging AND labels.starred = *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Job]{@link google.cloud.dataproc.v1beta2.Job}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Job]{@link google.cloud.dataproc.v1beta2.Job} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListJobsRequest]{@link google.cloud.dataproc.v1beta2.ListJobsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListJobsResponse]{@link google.cloud.dataproc.v1beta2.ListJobsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listJobs(
      request: protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob[],
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest|null,
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsResponse>,
      callback?: Callback<
          protosTypes.google.cloud.dataproc.v1beta2.IJob[],
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest|null,
          protosTypes.google.cloud.dataproc.v1beta2.IListJobsResponse>):
      Promise<[
        protosTypes.google.cloud.dataproc.v1beta2.IJob[],
        protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest|null,
        protosTypes.google.cloud.dataproc.v1beta2.IListJobsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.listJobs(request, options, callback);
  }

/**
 * Equivalent to {@link listJobs}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listJobs} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The ID of the Google Cloud Platform project that the job
 *   belongs to.
 * @param {string} request.region
 *   Required. The Dataproc region in which to handle the request.
 * @param {number} [request.pageSize]
 *   Optional. The number of results to return in each response.
 * @param {string} [request.pageToken]
 *   Optional. The page token, returned by a previous call, to request the
 *   next page of results.
 * @param {string} [request.clusterName]
 *   Optional. If set, the returned jobs list includes only jobs that were
 *   submitted to the named cluster.
 * @param {google.cloud.dataproc.v1beta2.ListJobsRequest.JobStateMatcher} [request.jobStateMatcher]
 *   Optional. Specifies enumerated categories of jobs to list.
 *   (default = match ALL jobs).
 *
 *   If `filter` is provided, `jobStateMatcher` will be ignored.
 * @param {string} [request.filter]
 *   Optional. A filter constraining the jobs to list. Filters are
 *   case-sensitive and have the following syntax:
 *
 *   [field = value] AND [field [= value]] ...
 *
 *   where **field** is `status.state` or `labels.[KEY]`, and `[KEY]` is a label
 *   key. **value** can be `*` to match all values.
 *   `status.state` can be either `ACTIVE` or `NON_ACTIVE`.
 *   Only the logical `AND` operator is supported; space-separated items are
 *   treated as having an implicit `AND` operator.
 *
 *   Example filter:
 *
 *   status.state = ACTIVE AND labels.env = staging AND labels.starred = *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Job]{@link google.cloud.dataproc.v1beta2.Job} on 'data' event.
 */
  listJobsStream(
      request?: protosTypes.google.cloud.dataproc.v1beta2.IListJobsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listJobs.createStream(
      this._innerApiCalls.listJobs as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified projectLocationAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectLocationAutoscalingPolicyPath(project:string,location:string,autoscalingPolicy:string) {
    return this._pathTemplates.projectLocationAutoscalingPolicyPathTemplate.render({
      project: project,
      location: location,
      autoscaling_policy: autoscalingPolicy,
    });
  }

  /**
   * Parse the project from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this._pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).project;
  }

  /**
   * Parse the location from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this._pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).location;
  }

  /**
   * Parse the autoscaling_policy from ProjectLocationAutoscalingPolicy resource.
   *
   * @param {string} projectLocationAutoscalingPolicyName
   *   A fully-qualified path representing project_location_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectLocationAutoscalingPolicyName(projectLocationAutoscalingPolicyName: string) {
    return this._pathTemplates.projectLocationAutoscalingPolicyPathTemplate.match(projectLocationAutoscalingPolicyName).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectLocationWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectLocationWorkflowTemplatePath(project:string,location:string,workflowTemplate:string) {
    return this._pathTemplates.projectLocationWorkflowTemplatePathTemplate.render({
      project: project,
      location: location,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this._pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).project;
  }

  /**
   * Parse the location from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this._pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).location;
  }

  /**
   * Parse the workflow_template from ProjectLocationWorkflowTemplate resource.
   *
   * @param {string} projectLocationWorkflowTemplateName
   *   A fully-qualified path representing project_location_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectLocationWorkflowTemplateName(projectLocationWorkflowTemplateName: string) {
    return this._pathTemplates.projectLocationWorkflowTemplatePathTemplate.match(projectLocationWorkflowTemplateName).workflow_template;
  }

  /**
   * Return a fully-qualified projectRegionAutoscalingPolicy resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} autoscaling_policy
   * @returns {string} Resource name string.
   */
  projectRegionAutoscalingPolicyPath(project:string,region:string,autoscalingPolicy:string) {
    return this._pathTemplates.projectRegionAutoscalingPolicyPathTemplate.render({
      project: project,
      region: region,
      autoscaling_policy: autoscalingPolicy,
    });
  }

  /**
   * Parse the project from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this._pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).project;
  }

  /**
   * Parse the region from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this._pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).region;
  }

  /**
   * Parse the autoscaling_policy from ProjectRegionAutoscalingPolicy resource.
   *
   * @param {string} projectRegionAutoscalingPolicyName
   *   A fully-qualified path representing project_region_autoscaling_policy resource.
   * @returns {string} A string representing the autoscaling_policy.
   */
  matchAutoscalingPolicyFromProjectRegionAutoscalingPolicyName(projectRegionAutoscalingPolicyName: string) {
    return this._pathTemplates.projectRegionAutoscalingPolicyPathTemplate.match(projectRegionAutoscalingPolicyName).autoscaling_policy;
  }

  /**
   * Return a fully-qualified projectRegionWorkflowTemplate resource name string.
   *
   * @param {string} project
   * @param {string} region
   * @param {string} workflow_template
   * @returns {string} Resource name string.
   */
  projectRegionWorkflowTemplatePath(project:string,region:string,workflowTemplate:string) {
    return this._pathTemplates.projectRegionWorkflowTemplatePathTemplate.render({
      project: project,
      region: region,
      workflow_template: workflowTemplate,
    });
  }

  /**
   * Parse the project from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this._pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).project;
  }

  /**
   * Parse the region from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the region.
   */
  matchRegionFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this._pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).region;
  }

  /**
   * Parse the workflow_template from ProjectRegionWorkflowTemplate resource.
   *
   * @param {string} projectRegionWorkflowTemplateName
   *   A fully-qualified path representing project_region_workflow_template resource.
   * @returns {string} A string representing the workflow_template.
   */
  matchWorkflowTemplateFromProjectRegionWorkflowTemplateName(projectRegionWorkflowTemplateName: string) {
    return this._pathTemplates.projectRegionWorkflowTemplatePathTemplate.match(projectRegionWorkflowTemplateName).workflow_template;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.jobControllerStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
